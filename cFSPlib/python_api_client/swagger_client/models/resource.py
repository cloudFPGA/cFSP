# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fpga_board': 'str',
        'shell_type': 'str',
        'sled_ip': 'str',
        'slot_num': 'int'
    }

    attribute_map = {
        'fpga_board': 'fpga_board',
        'shell_type': 'shell_type',
        'sled_ip': 'sled_ip',
        'slot_num': 'slot_num'
    }

    def __init__(self, fpga_board=None, shell_type=None, sled_ip=None, slot_num=None):  # noqa: E501
        """Resource - a model defined in Swagger"""  # noqa: E501
        self._fpga_board = None
        self._shell_type = None
        self._sled_ip = None
        self._slot_num = None
        self.discriminator = None
        if fpga_board is not None:
            self.fpga_board = fpga_board
        if shell_type is not None:
            self.shell_type = shell_type
        if sled_ip is not None:
            self.sled_ip = sled_ip
        if slot_num is not None:
            self.slot_num = slot_num

    @property
    def fpga_board(self):
        """Gets the fpga_board of this Resource.  # noqa: E501

        Type of cloudFPGA  # noqa: E501

        :return: The fpga_board of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._fpga_board

    @fpga_board.setter
    def fpga_board(self, fpga_board):
        """Sets the fpga_board of this Resource.

        Type of cloudFPGA  # noqa: E501

        :param fpga_board: The fpga_board of this Resource.  # noqa: E501
        :type: str
        """

        self._fpga_board = fpga_board

    @property
    def shell_type(self):
        """Gets the shell_type of this Resource.  # noqa: E501

        Type of the current Shell (interface) of the FPGA  # noqa: E501

        :return: The shell_type of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._shell_type

    @shell_type.setter
    def shell_type(self, shell_type):
        """Sets the shell_type of this Resource.

        Type of the current Shell (interface) of the FPGA  # noqa: E501

        :param shell_type: The shell_type of this Resource.  # noqa: E501
        :type: str
        """

        self._shell_type = shell_type

    @property
    def sled_ip(self):
        """Gets the sled_ip of this Resource.  # noqa: E501

        IP of sled manager  # noqa: E501

        :return: The sled_ip of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._sled_ip

    @sled_ip.setter
    def sled_ip(self, sled_ip):
        """Sets the sled_ip of this Resource.

        IP of sled manager  # noqa: E501

        :param sled_ip: The sled_ip of this Resource.  # noqa: E501
        :type: str
        """

        self._sled_ip = sled_ip

    @property
    def slot_num(self):
        """Gets the slot_num of this Resource.  # noqa: E501

        Slot number of resource  # noqa: E501

        :return: The slot_num of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._slot_num

    @slot_num.setter
    def slot_num(self, slot_num):
        """Sets the slot_num of this Resource.

        Slot number of resource  # noqa: E501

        :param slot_num: The slot_num of this Resource.  # noqa: E501
        :type: int
        """

        self._slot_num = slot_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
