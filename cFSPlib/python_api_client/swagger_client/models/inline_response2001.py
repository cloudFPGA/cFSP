# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_id': 'str',
        'image_ip': 'str',
        'instance_id': 'int',
        'slot_num': 'int',
        'staus': 'str'
    }

    attribute_map = {
        'image_id': 'image_id',
        'image_ip': 'image_ip',
        'instance_id': 'instance_id',
        'slot_num': 'slot_num',
        'staus': 'staus'
    }

    def __init__(self, image_id=None, image_ip=None, instance_id=None, slot_num=None, staus=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._image_id = None
        self._image_ip = None
        self._instance_id = None
        self._slot_num = None
        self._staus = None
        self.discriminator = None
        if image_id is not None:
            self.image_id = image_id
        if image_ip is not None:
            self.image_ip = image_ip
        if instance_id is not None:
            self.instance_id = instance_id
        if slot_num is not None:
            self.slot_num = slot_num
        if staus is not None:
            self.staus = staus

    @property
    def image_id(self):
        """Gets the image_id of this InlineResponse2001.  # noqa: E501

        Image unique identifier  # noqa: E501

        :return: The image_id of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this InlineResponse2001.

        Image unique identifier  # noqa: E501

        :param image_id: The image_id of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_ip(self):
        """Gets the image_ip of this InlineResponse2001.  # noqa: E501

        Ip Address of the SHELL  # noqa: E501

        :return: The image_ip of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._image_ip

    @image_ip.setter
    def image_ip(self, image_ip):
        """Sets the image_ip of this InlineResponse2001.

        Ip Address of the SHELL  # noqa: E501

        :param image_ip: The image_ip of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._image_ip = image_ip

    @property
    def instance_id(self):
        """Gets the instance_id of this InlineResponse2001.  # noqa: E501

        ROLE instance unique identifier  # noqa: E501

        :return: The instance_id of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this InlineResponse2001.

        ROLE instance unique identifier  # noqa: E501

        :param instance_id: The instance_id of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def slot_num(self):
        """Gets the slot_num of this InlineResponse2001.  # noqa: E501

        Number of the deployed slot  # noqa: E501

        :return: The slot_num of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._slot_num

    @slot_num.setter
    def slot_num(self, slot_num):
        """Sets the slot_num of this InlineResponse2001.

        Number of the deployed slot  # noqa: E501

        :param slot_num: The slot_num of this InlineResponse2001.  # noqa: E501
        :type: int
        """

        self._slot_num = slot_num

    @property
    def staus(self):
        """Gets the staus of this InlineResponse2001.  # noqa: E501

        Reports that the instance was sucessfull deployed.  # noqa: E501

        :return: The staus of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._staus

    @staus.setter
    def staus(self, staus):
        """Sets the staus of this InlineResponse2001.

        Reports that the instance was sucessfull deployed.  # noqa: E501

        :param staus: The staus of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._staus = staus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
