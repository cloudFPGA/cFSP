# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cf_manager_rest_api_delete_image(self, username, password, image_id, **kwargs):  # noqa: E501
        """Delete an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_delete_image(username, password, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :param str image_id: Image unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cf_manager_rest_api_delete_image_with_http_info(username, password, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cf_manager_rest_api_delete_image_with_http_info(username, password, image_id, **kwargs)  # noqa: E501
            return data

    def cf_manager_rest_api_delete_image_with_http_info(self, username, password, image_id, **kwargs):  # noqa: E501
        """Delete an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_delete_image_with_http_info(username, password, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :param str image_id: Image unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'password', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cf_manager_rest_api_delete_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `cf_manager_rest_api_delete_image`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `cf_manager_rest_api_delete_image`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `cf_manager_rest_api_delete_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/{image_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cf_manager_rest_api_get_image_single(self, username, password, image_id, **kwargs):  # noqa: E501
        """Get an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_get_image_single(username, password, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :param str image_id: Image unique identifier (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cf_manager_rest_api_get_image_single_with_http_info(username, password, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cf_manager_rest_api_get_image_single_with_http_info(username, password, image_id, **kwargs)  # noqa: E501
            return data

    def cf_manager_rest_api_get_image_single_with_http_info(self, username, password, image_id, **kwargs):  # noqa: E501
        """Get an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_get_image_single_with_http_info(username, password, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :param str image_id: Image unique identifier (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'password', 'image_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cf_manager_rest_api_get_image_single" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `cf_manager_rest_api_get_image_single`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `cf_manager_rest_api_get_image_single`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `cf_manager_rest_api_get_image_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/{image_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cf_manager_rest_api_get_images(self, username, password, **kwargs):  # noqa: E501
        """Get all images of a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_get_images(username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :param int limit:
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cf_manager_rest_api_get_images_with_http_info(username, password, **kwargs)  # noqa: E501
        else:
            (data) = self.cf_manager_rest_api_get_images_with_http_info(username, password, **kwargs)  # noqa: E501
            return data

    def cf_manager_rest_api_get_images_with_http_info(self, username, password, **kwargs):  # noqa: E501
        """Get all images of a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_get_images_with_http_info(username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :param int limit:
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'password', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cf_manager_rest_api_get_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `cf_manager_rest_api_get_images`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `cf_manager_rest_api_get_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Image]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cf_manager_rest_api_post_app_logic(self, image_details, image_file, sig_file, pr_verify_rpt, username, password, **kwargs):  # noqa: E501
        """Upload an image of type `app logic`  # noqa: E501

        This uploads an new image (aka FPGA **bin**file). **This method is for the app logic in case of partial reconfiguration building on platform logics**. The `id` of the uploaded Image can then be used to create *Instances* or *Clusters*. It **must** contain the corresponding .sig file that was produced by the build. The resulting image can be viewed and deleted like other images.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_post_app_logic(image_details, image_file, sig_file, pr_verify_rpt, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_details: (required)
        :param str image_file: (required)
        :param str sig_file: (required)
        :param str pr_verify_rpt: (required)
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cf_manager_rest_api_post_app_logic_with_http_info(image_details, image_file, sig_file, pr_verify_rpt, username, password, **kwargs)  # noqa: E501
        else:
            (data) = self.cf_manager_rest_api_post_app_logic_with_http_info(image_details, image_file, sig_file, pr_verify_rpt, username, password, **kwargs)  # noqa: E501
            return data

    def cf_manager_rest_api_post_app_logic_with_http_info(self, image_details, image_file, sig_file, pr_verify_rpt, username, password, **kwargs):  # noqa: E501
        """Upload an image of type `app logic`  # noqa: E501

        This uploads an new image (aka FPGA **bin**file). **This method is for the app logic in case of partial reconfiguration building on platform logics**. The `id` of the uploaded Image can then be used to create *Instances* or *Clusters*. It **must** contain the corresponding .sig file that was produced by the build. The resulting image can be viewed and deleted like other images.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_post_app_logic_with_http_info(image_details, image_file, sig_file, pr_verify_rpt, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_details: (required)
        :param str image_file: (required)
        :param str sig_file: (required)
        :param str pr_verify_rpt: (required)
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_details', 'image_file', 'sig_file', 'pr_verify_rpt', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cf_manager_rest_api_post_app_logic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_details' is set
        if ('image_details' not in params or
                params['image_details'] is None):
            raise ValueError("Missing the required parameter `image_details` when calling `cf_manager_rest_api_post_app_logic`")  # noqa: E501
        # verify the required parameter 'image_file' is set
        if ('image_file' not in params or
                params['image_file'] is None):
            raise ValueError("Missing the required parameter `image_file` when calling `cf_manager_rest_api_post_app_logic`")  # noqa: E501
        # verify the required parameter 'sig_file' is set
        if ('sig_file' not in params or
                params['sig_file'] is None):
            raise ValueError("Missing the required parameter `sig_file` when calling `cf_manager_rest_api_post_app_logic`")  # noqa: E501
        # verify the required parameter 'pr_verify_rpt' is set
        if ('pr_verify_rpt' not in params or
                params['pr_verify_rpt'] is None):
            raise ValueError("Missing the required parameter `pr_verify_rpt` when calling `cf_manager_rest_api_post_app_logic`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `cf_manager_rest_api_post_app_logic`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `cf_manager_rest_api_post_app_logic`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image_details' in params:
            form_params.append(('image_details', params['image_details']))  # noqa: E501
        if 'image_file' in params:
            local_var_files['image_file'] = params['image_file']  # noqa: E501
        if 'sig_file' in params:
            local_var_files['sig_file'] = params['sig_file']  # noqa: E501
        if 'pr_verify_rpt' in params:
            local_var_files['pr_verify_rpt'] = params['pr_verify_rpt']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images/app_logic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cf_manager_rest_api_post_images(self, image_details, image_file, pr_verify_rpt, username, password, **kwargs):  # noqa: E501
        """Upload an image  # noqa: E501

        This uploads an new Image (aka FPGA bitfile). The `id` of the uploaded Image can then be used to create *Instances* or *Clusters*.  If the bitfile **is not a partial bitfile**, the *image_detail* **property `breed` must be `\"SHELL\"`**. The *image_detail* property `shell_type` is only relevant for the partial reconfiguration flow, but cannot be empty (e.g. enter `\"NO_PR\"`).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_post_images(image_details, image_file, pr_verify_rpt, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_details: (required)
        :param str image_file: (required)
        :param str pr_verify_rpt: (required)
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cf_manager_rest_api_post_images_with_http_info(image_details, image_file, pr_verify_rpt, username, password, **kwargs)  # noqa: E501
        else:
            (data) = self.cf_manager_rest_api_post_images_with_http_info(image_details, image_file, pr_verify_rpt, username, password, **kwargs)  # noqa: E501
            return data

    def cf_manager_rest_api_post_images_with_http_info(self, image_details, image_file, pr_verify_rpt, username, password, **kwargs):  # noqa: E501
        """Upload an image  # noqa: E501

        This uploads an new Image (aka FPGA bitfile). The `id` of the uploaded Image can then be used to create *Instances* or *Clusters*.  If the bitfile **is not a partial bitfile**, the *image_detail* **property `breed` must be `\"SHELL\"`**. The *image_detail* property `shell_type` is only relevant for the partial reconfiguration flow, but cannot be empty (e.g. enter `\"NO_PR\"`).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cf_manager_rest_api_post_images_with_http_info(image_details, image_file, pr_verify_rpt, username, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_details: (required)
        :param str image_file: (required)
        :param str pr_verify_rpt: (required)
        :param str username: OpenStack username (required)
        :param str password: OpenStack password (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_details', 'image_file', 'pr_verify_rpt', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cf_manager_rest_api_post_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_details' is set
        if ('image_details' not in params or
                params['image_details'] is None):
            raise ValueError("Missing the required parameter `image_details` when calling `cf_manager_rest_api_post_images`")  # noqa: E501
        # verify the required parameter 'image_file' is set
        if ('image_file' not in params or
                params['image_file'] is None):
            raise ValueError("Missing the required parameter `image_file` when calling `cf_manager_rest_api_post_images`")  # noqa: E501
        # verify the required parameter 'pr_verify_rpt' is set
        if ('pr_verify_rpt' not in params or
                params['pr_verify_rpt'] is None):
            raise ValueError("Missing the required parameter `pr_verify_rpt` when calling `cf_manager_rest_api_post_images`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `cf_manager_rest_api_post_images`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `cf_manager_rest_api_post_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image_details' in params:
            form_params.append(('image_details', params['image_details']))  # noqa: E501
        if 'image_file' in params:
            local_var_files['image_file'] = params['image_file']  # noqa: E501
        if 'pr_verify_rpt' in params:
            local_var_files['pr_verify_rpt'] = params['pr_verify_rpt']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Image',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
