# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failure_cnt': 'int',
        'failure_msg': 'str',
        'status': 'str',
        'success_cnt': 'int'
    }

    attribute_map = {
        'failure_cnt': 'failure_cnt',
        'failure_msg': 'failure_msg',
        'status': 'status',
        'success_cnt': 'success_cnt'
    }

    def __init__(self, failure_cnt=None, failure_msg=None, status=None, success_cnt=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._failure_cnt = None
        self._failure_msg = None
        self._status = None
        self._success_cnt = None
        self.discriminator = None
        if failure_cnt is not None:
            self.failure_cnt = failure_cnt
        if failure_msg is not None:
            self.failure_msg = failure_msg
        if status is not None:
            self.status = status
        if success_cnt is not None:
            self.success_cnt = success_cnt

    @property
    def failure_cnt(self):
        """Gets the failure_cnt of this InlineResponse2005.  # noqa: E501

        Counter of failures on this resource  # noqa: E501

        :return: The failure_cnt of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._failure_cnt

    @failure_cnt.setter
    def failure_cnt(self, failure_cnt):
        """Sets the failure_cnt of this InlineResponse2005.

        Counter of failures on this resource  # noqa: E501

        :param failure_cnt: The failure_cnt of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._failure_cnt = failure_cnt

    @property
    def failure_msg(self):
        """Gets the failure_msg of this InlineResponse2005.  # noqa: E501

        The last failure that occured on this resource  # noqa: E501

        :return: The failure_msg of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._failure_msg

    @failure_msg.setter
    def failure_msg(self, failure_msg):
        """Sets the failure_msg of this InlineResponse2005.

        The last failure that occured on this resource  # noqa: E501

        :param failure_msg: The failure_msg of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._failure_msg = failure_msg

    @property
    def status(self):
        """Gets the status of this InlineResponse2005.  # noqa: E501

        The state of the resource  # noqa: E501

        :return: The status of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2005.

        The state of the resource  # noqa: E501

        :param status: The status of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def success_cnt(self):
        """Gets the success_cnt of this InlineResponse2005.  # noqa: E501

        Counter of successfull deployments on this resource  # noqa: E501

        :return: The success_cnt of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._success_cnt

    @success_cnt.setter
    def success_cnt(self, success_cnt):
        """Sets the success_cnt of this InlineResponse2005.

        Counter of successfull deployments on this resource  # noqa: E501

        :param success_cnt: The success_cnt of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._success_cnt = success_cnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
