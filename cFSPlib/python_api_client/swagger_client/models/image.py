# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'breed': 'str',
        'comment': 'str',
        'fpga_board': 'str',
        'id': 'str',
        'shell_type': 'str'
    }

    attribute_map = {
        'breed': 'breed',
        'comment': 'comment',
        'fpga_board': 'fpga_board',
        'id': 'id',
        'shell_type': 'shell_type'
    }

    def __init__(self, breed=None, comment=None, fpga_board=None, id=None, shell_type=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501
        self._breed = None
        self._comment = None
        self._fpga_board = None
        self._id = None
        self._shell_type = None
        self.discriminator = None
        if breed is not None:
            self.breed = breed
        if comment is not None:
            self.comment = comment
        if fpga_board is not None:
            self.fpga_board = fpga_board
        if id is not None:
            self.id = id
        if shell_type is not None:
            self.shell_type = shell_type

    @property
    def breed(self):
        """Gets the breed of this Image.  # noqa: E501

        SHELL or ROLE; SHELL is only allowed by admins  # noqa: E501

        :return: The breed of this Image.  # noqa: E501
        :rtype: str
        """
        return self._breed

    @breed.setter
    def breed(self, breed):
        """Sets the breed of this Image.

        SHELL or ROLE; SHELL is only allowed by admins  # noqa: E501

        :param breed: The breed of this Image.  # noqa: E501
        :type: str
        """

        self._breed = breed

    @property
    def comment(self):
        """Gets the comment of this Image.  # noqa: E501

        Some valuable information for humans (optional)  # noqa: E501

        :return: The comment of this Image.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Image.

        Some valuable information for humans (optional)  # noqa: E501

        :param comment: The comment of this Image.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def fpga_board(self):
        """Gets the fpga_board of this Image.  # noqa: E501

        Type of cloudFPGA (for SHELL only)  # noqa: E501

        :return: The fpga_board of this Image.  # noqa: E501
        :rtype: str
        """
        return self._fpga_board

    @fpga_board.setter
    def fpga_board(self, fpga_board):
        """Sets the fpga_board of this Image.

        Type of cloudFPGA (for SHELL only)  # noqa: E501

        :param fpga_board: The fpga_board of this Image.  # noqa: E501
        :type: str
        """

        self._fpga_board = fpga_board

    @property
    def id(self):
        """Gets the id of this Image.  # noqa: E501

        ID of the Image  # noqa: E501

        :return: The id of this Image.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.

        ID of the Image  # noqa: E501

        :param id: The id of this Image.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def shell_type(self):
        """Gets the shell_type of this Image.  # noqa: E501

        Shell type as interface  # noqa: E501

        :return: The shell_type of this Image.  # noqa: E501
        :rtype: str
        """
        return self._shell_type

    @shell_type.setter
    def shell_type(self, shell_type):
        """Sets the shell_type of this Image.

        Shell type as interface  # noqa: E501

        :param shell_type: The shell_type of this Image.  # noqa: E501
        :type: str
        """

        self._shell_type = shell_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
