# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImagesAppLogicBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_details': 'str',
        'image_file': 'str',
        'sig_file': 'str',
        'pr_verify_rpt': 'str'
    }

    attribute_map = {
        'image_details': 'image_details',
        'image_file': 'image_file',
        'sig_file': 'sig_file',
        'pr_verify_rpt': 'pr_verify_rpt'
    }

    def __init__(self, image_details=None, image_file=None, sig_file=None, pr_verify_rpt=None):  # noqa: E501
        """ImagesAppLogicBody - a model defined in Swagger"""  # noqa: E501
        self._image_details = None
        self._image_file = None
        self._sig_file = None
        self._pr_verify_rpt = None
        self.discriminator = None
        self.image_details = image_details
        self.image_file = image_file
        self.sig_file = sig_file
        self.pr_verify_rpt = pr_verify_rpt

    @property
    def image_details(self):
        """Gets the image_details of this ImagesAppLogicBody.  # noqa: E501

        Must be a valid `image_detail` dict-representation. Example: ```json  {    \"cl_id\": \"42\",    \"fpga_board\": \"FMKU60\",    \"shell_type\": \"Themisto\",    \"comment\" : \"Some valuable               information for humans (optional)\"  }  ```   # noqa: E501

        :return: The image_details of this ImagesAppLogicBody.  # noqa: E501
        :rtype: str
        """
        return self._image_details

    @image_details.setter
    def image_details(self, image_details):
        """Sets the image_details of this ImagesAppLogicBody.

        Must be a valid `image_detail` dict-representation. Example: ```json  {    \"cl_id\": \"42\",    \"fpga_board\": \"FMKU60\",    \"shell_type\": \"Themisto\",    \"comment\" : \"Some valuable               information for humans (optional)\"  }  ```   # noqa: E501

        :param image_details: The image_details of this ImagesAppLogicBody.  # noqa: E501
        :type: str
        """
        if image_details is None:
            raise ValueError("Invalid value for `image_details`, must not be `None`")  # noqa: E501

        self._image_details = image_details

    @property
    def image_file(self):
        """Gets the image_file of this ImagesAppLogicBody.  # noqa: E501

        FPGA binfile to be programmed  # noqa: E501

        :return: The image_file of this ImagesAppLogicBody.  # noqa: E501
        :rtype: str
        """
        return self._image_file

    @image_file.setter
    def image_file(self, image_file):
        """Sets the image_file of this ImagesAppLogicBody.

        FPGA binfile to be programmed  # noqa: E501

        :param image_file: The image_file of this ImagesAppLogicBody.  # noqa: E501
        :type: str
        """
        if image_file is None:
            raise ValueError("Invalid value for `image_file`, must not be `None`")  # noqa: E501

        self._image_file = image_file

    @property
    def sig_file(self):
        """Gets the sig_file of this ImagesAppLogicBody.  # noqa: E501

        The corresponding .sig file of the binfile  # noqa: E501

        :return: The sig_file of this ImagesAppLogicBody.  # noqa: E501
        :rtype: str
        """
        return self._sig_file

    @sig_file.setter
    def sig_file(self, sig_file):
        """Sets the sig_file of this ImagesAppLogicBody.

        The corresponding .sig file of the binfile  # noqa: E501

        :param sig_file: The sig_file of this ImagesAppLogicBody.  # noqa: E501
        :type: str
        """
        if sig_file is None:
            raise ValueError("Invalid value for `sig_file`, must not be `None`")  # noqa: E501

        self._sig_file = sig_file

    @property
    def pr_verify_rpt(self):
        """Gets the pr_verify_rpt of this ImagesAppLogicBody.  # noqa: E501

        Result of the `pr_verify` command  # noqa: E501

        :return: The pr_verify_rpt of this ImagesAppLogicBody.  # noqa: E501
        :rtype: str
        """
        return self._pr_verify_rpt

    @pr_verify_rpt.setter
    def pr_verify_rpt(self, pr_verify_rpt):
        """Sets the pr_verify_rpt of this ImagesAppLogicBody.

        Result of the `pr_verify` command  # noqa: E501

        :param pr_verify_rpt: The pr_verify_rpt of this ImagesAppLogicBody.  # noqa: E501
        :type: str
        """
        if pr_verify_rpt is None:
            raise ValueError("Invalid value for `pr_verify_rpt`, must not be `None`")  # noqa: E501

        self._pr_verify_rpt = pr_verify_rpt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImagesAppLogicBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImagesAppLogicBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
