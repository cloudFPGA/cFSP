# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'int',
        'instances': 'list[Instance]',
        'nodes': 'NodeMap',
        'user_id': 'str'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'instances': 'instances',
        'nodes': 'nodes',
        'user_id': 'user_id'
    }

    def __init__(self, cluster_id=None, instances=None, nodes=None, user_id=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._instances = None
        self._nodes = None
        self._user_id = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if instances is not None:
            self.instances = instances
        if nodes is not None:
            self.nodes = nodes
        if user_id is not None:
            self.user_id = user_id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this Cluster.  # noqa: E501

        ID of cluster  # noqa: E501

        :return: The cluster_id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Cluster.

        ID of cluster  # noqa: E501

        :param cluster_id: The cluster_id of this Cluster.  # noqa: E501
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def instances(self):
        """Gets the instances of this Cluster.  # noqa: E501


        :return: The instances of this Cluster.  # noqa: E501
        :rtype: list[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this Cluster.


        :param instances: The instances of this Cluster.  # noqa: E501
        :type: list[Instance]
        """

        self._instances = instances

    @property
    def nodes(self):
        """Gets the nodes of this Cluster.  # noqa: E501


        :return: The nodes of this Cluster.  # noqa: E501
        :rtype: NodeMap
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Cluster.


        :param nodes: The nodes of this Cluster.  # noqa: E501
        :type: NodeMap
        """

        self._nodes = nodes

    @property
    def user_id(self):
        """Gets the user_id of this Cluster.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Cluster.

        User ID  # noqa: E501

        :param user_id: The user_id of this Cluster.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
