# coding: utf-8

"""
    cloudFPGA Resource Manager API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Quota(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_resources': 'list[int]',
        'current_acquired_instances': 'int',
        'max_acquire_instances': 'int'
    }

    attribute_map = {
        'allowed_resources': 'allowed_resources',
        'current_acquired_instances': 'current_acquired_instances',
        'max_acquire_instances': 'max_acquire_instances'
    }

    def __init__(self, allowed_resources=None, current_acquired_instances=None, max_acquire_instances=None):  # noqa: E501
        """Quota - a model defined in Swagger"""  # noqa: E501
        self._allowed_resources = None
        self._current_acquired_instances = None
        self._max_acquire_instances = None
        self.discriminator = None
        if allowed_resources is not None:
            self.allowed_resources = allowed_resources
        if current_acquired_instances is not None:
            self.current_acquired_instances = current_acquired_instances
        if max_acquire_instances is not None:
            self.max_acquire_instances = max_acquire_instances

    @property
    def allowed_resources(self):
        """Gets the allowed_resources of this Quota.  # noqa: E501

        List of allowed resources for this project (admin only).  # noqa: E501

        :return: The allowed_resources of this Quota.  # noqa: E501
        :rtype: list[int]
        """
        return self._allowed_resources

    @allowed_resources.setter
    def allowed_resources(self, allowed_resources):
        """Sets the allowed_resources of this Quota.

        List of allowed resources for this project (admin only).  # noqa: E501

        :param allowed_resources: The allowed_resources of this Quota.  # noqa: E501
        :type: list[int]
        """

        self._allowed_resources = allowed_resources

    @property
    def current_acquired_instances(self):
        """Gets the current_acquired_instances of this Quota.  # noqa: E501

        Number of currently acquired Instances  # noqa: E501

        :return: The current_acquired_instances of this Quota.  # noqa: E501
        :rtype: int
        """
        return self._current_acquired_instances

    @current_acquired_instances.setter
    def current_acquired_instances(self, current_acquired_instances):
        """Sets the current_acquired_instances of this Quota.

        Number of currently acquired Instances  # noqa: E501

        :param current_acquired_instances: The current_acquired_instances of this Quota.  # noqa: E501
        :type: int
        """

        self._current_acquired_instances = current_acquired_instances

    @property
    def max_acquire_instances(self):
        """Gets the max_acquire_instances of this Quota.  # noqa: E501

        Maximum allowed number of Instaces to be acquired by project  # noqa: E501

        :return: The max_acquire_instances of this Quota.  # noqa: E501
        :rtype: int
        """
        return self._max_acquire_instances

    @max_acquire_instances.setter
    def max_acquire_instances(self, max_acquire_instances):
        """Sets the max_acquire_instances of this Quota.

        Maximum allowed number of Instaces to be acquired by project  # noqa: E501

        :param max_acquire_instances: The max_acquire_instances of this Quota.  # noqa: E501
        :type: int
        """

        self._max_acquire_instances = max_acquire_instances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Quota, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Quota):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
